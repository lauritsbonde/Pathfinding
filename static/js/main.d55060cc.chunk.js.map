{"version":3,"sources":["Styles/grid.module.css","Styles/switcher.module.css","Styles/graph.module.css","Pathfinding/dijkstra.js","Pathfinding/pq.js","Pathfinding/Graph.js","Pathfinding/aStar.js","Components/Cell.js","Components/Row.js","Components/Table.js","Components/Grid.js","Components/Canvas.js","Components/GraphOptions.js","Components/Graph.js","Components/Switcher.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","pq","require","graph","found","id","start","path","next","getDigraph","vertices","from","cell","push","manhattanDistance","first","second","dimensions","p1","toCoord","p2","Math","abs","point","floor","height","width","startPath","type","createGraphFromGrid","grid","createGraphFromGraph","reset","insert","distance","step","end","graphType","currentPlace","dequeue","state","msg","edges","forEach","field","to","queue","exchange","i","j","copy","sink","index","length","leftChild","rightChild","undefined","smallest","parrent","floatUp","splice","isEmpty","printOut","console","log","getQueue","diGraph","findEdges","edgeTo","fields","Array","fill","map","edge","calcHeuristic","base","pow","sqrt","neighbour","Cell","changer","styles","onClick","className","style","backgroundColor","bg","round","Row","data","heightP","row","Table","styleSheeet","changeField","dijkstra","aStar","Grid","useState","changeWhat","setChangeWhat","setFields","setDimension","maze","gridMaker","setGrid","changeDimension","what","value","newDim","parseInt","newGrid","changeChanger","pathFindingState","setPathfindingState","progress","place","idToArrayplace","newRun","options","combination","name","checked","onChange","e","target","htmlFor","oldFields","Node","this","Infinity","w","h","Canvas","click","draw","canvasRef","useRef","useEffect","context","current","getContext","window","innerWidth","innerHeight","ref","GraphOptions","change","currentMark","changeGraphtype","changeAlgorithm","clear","setField","amountOfVertices","fieldOptions","clickChanges","algorithms","defaultValue","vertex","disabled","lineCircleInterception","line","circle","a","slope","b","xCenter","yIntercept","yCenter","c","radius","xintersections","x","y","distPointToLineSegment","startLine","endLine","l2","distHelper","t","max","min","color","inner","outer","Graph","setVertices","setEdges","clickType","setClickType","setGraphtype","algorithm","setAlgorithm","pathfindingState","drawEdges","ctx","clearRect","canvas","lineWidth","fillStyle","strokeStyle","beginPath","moveTo","lineTo","stroke","middle","v1","v2","middleOfEdge","trianglePoints","lineM","lineB","perpM","perpB","perplinePoints","linePoints","correctPoint","calcTrianglePoints","createVertex","event","rect","getBoundingClientRect","clientX","left","clientY","top","checkVertexIntesection","edgeStart","setStartEdge","createEdge","interSection","withColor","edgeDoesntExist","newEdge","standardColor","removeVertex","vertexIntesect","newVertices","removeEdgesIncludingVertex","circleRadius","newEdges","removeEdge","closest","distToEdge","startAlgo","setFinishedPath","lastV","v","graphContainer","testV","testE","testSetup","typeForAlgo","oldField","newColor","newouter","error","arc","PI","font","fillText","drawType","Switcher","setType","switchType","selector","active","std","container","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d55060cc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"grid_grid__DhQaN\",\"row\":\"grid_row__2F_Uq\",\"cell\":\"grid_cell__3hkii\",\"options\":\"grid_options__2ZMzW\",\"combination\":\"grid_combination__1cqbv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selector\":\"switcher_selector__1I-1s\",\"active\":\"switcher_active__1o3T2\",\"std\":\"switcher_std__16BoH\",\"container\":\"switcher_container__1AEDI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"graphContainer\":\"graph_graphContainer__xMbfK\",\"options\":\"graph_options__2fewk\",\"clickChanges\":\"graph_clickChanges__3cqGP\",\"graphType\":\"graph_graphType__2tepa\",\"algorithms\":\"graph_algorithms__2rBOR\"};","const pq = require('./pq');\n\nconst graph = require('./Graph');\n\nfunction startPath(start, type) {\n    if (type.type === 'grid') {\n        graph.createGraphFromGrid(type.grid);\n    } else if (type.type === 'graph') {\n        graph.createGraphFromGraph(type.graph);\n    }\n    pq.reset();\n    pq.insert(start, 0);\n\n    graph.getDigraph().vertices[start].from = -1;\n    graph.getDigraph().vertices[start].distance = 0;\n}\n\nfunction step(end, start, graphType) {\n    const currentPlace = pq.dequeue();\n    graph.getDigraph().vertices[currentPlace.id].state = 3;\n\n    if (currentPlace.id === end) {\n        pq.reset();\n        return { msg: 'done', path: found(currentPlace.id, start) };\n    }\n\n    graph.getDigraph().edges[currentPlace.id].forEach((cell) => {\n        // states 1: 'clear', 2: 'in pq', 3: 'dequed/wall(maybe make wall another state)'\n        if (graph.getDigraph().vertices[cell].state === 3) {\n            return;\n        } else if (graph.getDigraph().vertices[cell].state === 2) {\n            //should the manhatten distance not be from the start\n            let distance;\n            if (graphType.type === 'grid') {\n                distance = manhattanDistance(currentPlace.id, cell, graphType.grid.dimensions) + graph.getDigraph().vertices[currentPlace.id].distance;\n            } else if (graphType.type === 'graph') {\n                //TODO: get the actial distance of the edge;\n                distance = 1;\n            }\n            if (distance < graph.getDigraph().vertices[cell].distance) {\n                pq.insert(cell, distance);\n                graph.getDigraph().vertices[cell].from = currentPlace.id;\n                graph.getDigraph().vertices[cell].distance = distance;\n                graph.getDigraph().vertices[cell].state = 2;\n            }\n        } else {\n            let distance;\n            if (graphType.type === 'grid') {\n                distance = manhattanDistance(currentPlace.id, cell, graphType.grid.dimensions) + graph.getDigraph().vertices[currentPlace.id].distance;\n            } else if (graphType.type === 'graph') {\n                //TODO: get the actial distance of the edge;\n                distance = 1;\n            }\n            pq.insert(cell, distance);\n            graph.getDigraph().vertices[cell].from = currentPlace.id;\n            graph.getDigraph().vertices[cell].distance = distance;\n            graph.getDigraph().vertices[cell].state = 2;\n        }\n    });\n    return { msg: 'running', field: { from: graph.getDigraph().vertices[currentPlace.id].from, to: currentPlace.id } };\n}\n\nfunction found(id, start) {\n    const path = [];\n    let next = id;\n    while (graph.getDigraph().vertices[next].from !== start) {\n        const cell = graph.getDigraph().vertices[next].from;\n        path.push(cell);\n        next = cell;\n    }\n    return path;\n}\n\nfunction manhattanDistance(first, second, dimensions) {\n    const p1 = toCoord(first, dimensions);\n    const p2 = toCoord(second, dimensions);\n    return Math.abs(p2[0] - p1[0]) + Math.abs(p2[1] - p1[1]);\n}\n\nfunction toCoord(point, dimensions) {\n    let row = Math.floor(point / dimensions.height);\n    let col = point % dimensions.width;\n    return [row, col];\n}\n\nmodule.exports = {\n    startPath,\n    step,\n};\n","let queue = [];\n\nfunction reset() {\n    queue = [];\n}\n\nfunction printOut() {\n    for (let i = 0; i < queue.length; i++) {\n        console.log(queue[i]);\n    }\n}\n\nfunction insert(id, distance) {\n    queue.push({ id, distance });\n    floatUp(queue.length - 1);\n}\n\nfunction getQueue() {\n    return queue;\n}\n\nfunction floatUp(index) {\n    while (index > 0) {\n        const parrent = Math.floor((index - 1) / 2);\n        if (queue[parrent].distance > queue[index].distance) {\n            exchange(parrent, index);\n            index = parrent;\n        } else {\n            break;\n        }\n    }\n}\n\nfunction exchange(i, j) {\n    const copy = queue[i];\n    queue[i] = queue[j];\n    queue[j] = copy;\n}\n\nfunction dequeue() {\n    exchange(0, queue.length - 1);\n    const next = queue.splice(queue.length - 1)[0];\n    sink(0);\n    return next;\n}\n\nfunction sink(index) {\n    while (index < queue.length) {\n        const leftChild = index * 2 + 1;\n        const rightChild = index * 2 + 2;\n        if (queue[leftChild] === undefined && queue[rightChild] === undefined) {\n            break;\n        } else if (queue[leftChild] !== undefined && queue[rightChild] === undefined) {\n            if (queue[leftChild].distance < queue[index].distance) {\n                exchange(leftChild, index);\n                index = leftChild;\n            } else {\n                break;\n            }\n        } else if (queue[leftChild] !== undefined && queue[rightChild] !== undefined) {\n            const smallest = queue[leftChild].distance - queue[rightChild].distance <= 0 ? leftChild : rightChild;\n            if (queue[smallest].distance < queue[index].distance) {\n                exchange(smallest, index);\n                index = smallest;\n            } else {\n                break;\n            }\n        } else {\n            break;\n        }\n    }\n}\n\nfunction isEmpty() {\n    return queue.length === 0;\n}\n\nmodule.exports = {\n    insert,\n    dequeue,\n    isEmpty,\n    reset,\n    printOut,\n    getQueue,\n    sink,\n};\n","const diGraph = { vertices: [], edges: [] };\n\nfunction createGraphFromGrid(grid) {\n    diGraph.vertices = [];\n    diGraph.edges = [];\n    for (let i = 0; i < grid.fields.length; i++) {\n        for (let j = 0; j < grid.fields[i].length; j++) {\n            diGraph.vertices.push(grid.fields[i][j]);\n            diGraph.edges[grid.fields[i][j].id] = findEdges(grid.fields, i, j);\n        }\n    }\n    console.log(diGraph);\n}\n\nfunction createGraphFromGraph(graph) {\n    diGraph.vertices = graph.vertices;\n    diGraph.edges = new Array(graph.vertices.length).fill(null).map(() => new Array(0).fill(null));\n    graph.edges.forEach((edge) => {\n        diGraph.edges[edge.from].push(edge.to);\n    });\n}\n\nfunction findEdges(grid, i, j) {\n    const edgeTo = [];\n    if (i < grid.length - 1) edgeTo.push(grid[i + 1][j].id);\n    if (j < grid[i].length - 1) edgeTo.push(grid[i][j + 1].id);\n    if (i > 0) edgeTo.push(grid[i - 1][j].id);\n    if (j > 0) edgeTo.push(grid[i][j - 1].id);\n    return edgeTo;\n}\n\nfunction getDigraph() {\n    return diGraph;\n}\n\nmodule.exports = {\n    createGraphFromGrid,\n    createGraphFromGraph,\n    getDigraph,\n};\n","const pq = require('./pq');\n\nconst graph = require('./Graph');\n\nfunction startPath(start, type) {\n    console.log(type);\n    if (type.type === 'grid') {\n        graph.createGraphFromGrid(type.grid);\n    } else if (type.type === 'graph') {\n        graph.createGraphFromGraph(type.graph);\n    }\n\n    pq.reset();\n    pq.insert(start, 0);\n\n    graph.getDigraph().vertices[start].from = -1;\n    graph.getDigraph().vertices[start].distance = 0;\n}\n\nfunction step(end, start, graphType) {\n    const next = pq.dequeue();\n    graph.getDigraph().vertices[next.id].state = 3;\n    if (next.id === end) {\n        pq.reset();\n        return { msg: 'done', path: found(next.id, start) };\n    }\n    graph.getDigraph().edges[next.id].forEach((neighbour) => {\n        // states 1: 'clear', 2: 'in pq', 3: 'dequed/wall(maybe make wall another state)'\n        if (graph.getDigraph().vertices[neighbour].state === 3) {\n            return;\n        } else if (graph.getDigraph().vertices[neighbour].state === 2) {\n            //should the manhatten distance not be from the start\n            let distance;\n            if (graphType.type === 'grid') {\n                distance = manhattanDistance(start, neighbour, graphType.grid.dimensions) + calcHeuristic(neighbour, end, graphType.grid.dimensions);\n            } else if (graphType.type === 'graph') {\n                //TODO: get the actial distance of the edge;\n                distance = 1;\n            }\n            if (distance < graph.getDigraph().vertices[neighbour].distance) {\n                pq.insert(neighbour, distance);\n                graph.getDigraph().vertices[neighbour].from = next.id;\n                graph.getDigraph().vertices[neighbour].distance = distance;\n                graph.getDigraph().vertices[neighbour].state = 2;\n            }\n        } else {\n            let distance;\n            if (graphType.type === 'grid') {\n                distance = manhattanDistance(start, neighbour, graphType.grid.dimensions) + calcHeuristic(neighbour, end, graphType.grid.dimensions);\n            } else if (graphType.type === 'graph') {\n                //TODO: get the actial distance of the edge;\n                distance = 1;\n            }\n            pq.insert(neighbour, distance);\n            graph.getDigraph().vertices[neighbour].from = next.id;\n            graph.getDigraph().vertices[neighbour].distance = distance;\n            graph.getDigraph().vertices[neighbour].state = 2;\n        }\n    });\n    return { msg: 'running', field: { from: graph.getDigraph().vertices[next.id].from, to: next.id } };\n}\n\nfunction findNeighbours(start, current, dimensions) {}\n\nfunction toCoord(point, dimensions) {\n    const row = Math.floor(point / dimensions.height);\n    const col = point % dimensions.width;\n    return [row, col];\n}\n\nfunction manhattanDistance(first, second, dimensions) {\n    const p1 = toCoord(first, dimensions);\n    const p2 = toCoord(second, dimensions);\n    return Math.abs(p2[0] - p1[0]) + Math.abs(p2[1] - p1[1]);\n}\n\nfunction calcHeuristic(first, second, dimensions) {\n    const p1 = toCoord(first, dimensions);\n    const p2 = toCoord(second, dimensions);\n    const base = Math.pow(p2[1] - p1[1], 2) + Math.pow(p2[0] - p1[0], 2);\n    return Math.sqrt(base);\n}\n\nfunction found(id, start) {\n    const path = [];\n    let next = id;\n    while (graph.getDigraph().vertices[next].from !== start) {\n        const cell = graph.getDigraph().vertices[next].from;\n        path.push(cell);\n        next = cell;\n    }\n    return path;\n}\n\nmodule.exports = {\n    startPath,\n    step,\n};\n","import React from 'react';\n\nconst Cell = ({ changer, cell, styles, width }) => {\n    return (\n        <td\n            onClick={() => {\n                changer(cell.id);\n            }}\n            className={styles.cell}\n            style={{ width: width + '%', backgroundColor: cell.bg }}\n        >\n            <p>{cell.id}</p>\n            <p>{Math.round(cell.distance*100) /100}</p>\n        </td>\n    );\n};\n\nexport default Cell;\n","import React from 'react';\n\nimport Cell from './Cell';\n\nconst Row = ({ data, styles, heightP, changer }) => {\n    return (\n        <tr className={styles.row} style={{ height: heightP + '%' }}>\n            {data.map((cell) => {\n                return <Cell key={cell.id} changer={changer} styles={styles} cell={cell} width={100 / data.length} />;\n            })}\n        </tr>\n    );\n};\n\nexport default Row;\n","import React from 'react';\n\nimport Row from './Row';\n\nconst Table = ({ styleSheeet, changeField, grid }) => {\n    return (\n        <>\n            <table>\n                <tbody>\n                    {grid.fields.map((row, i) => {\n                        return <Row key={i} styles={styleSheeet} data={row} heightP={100 / grid.length} changer={changeField} />;\n                    })}\n                </tbody>\n            </table>\n        </>\n    );\n};\n\nexport default Table;\n","import React, { useState } from 'react';\n\nimport styleSheeet from '../Styles/grid.module.css';\n\nimport Table from './Table';\n\nconst dijkstra = require('../Pathfinding/dijkstra');\nconst aStar = require('../Pathfinding/aStar');\n\nconst Grid = () => {\n    //const [algorithm, setAlgorithm] = useState('dijksta');\n\n    const [changeWhat, setChangeWhat] = useState(0);\n\n    const [fields, setFields] = useState({ start: 11, end: 13 });\n\n    const [dimensions, setDimension] = useState({ width: 10, height: 10 });\n\n    const maze = gridMaker(dimensions.width, dimensions.height, fields.start, fields.end);\n\n    const [grid, setGrid] = useState(maze);\n\n    const changeDimension = (what, value) => {\n        /* For individual height and width, problems with calculating pos from id\n        const old = dimensions;\n        old[what] = parseInt(value);\n        setDimension({ ...old });\n        */\n        const newDim = { width: parseInt(value) };\n        newDim.height = parseInt(value);\n        setDimension({ ...newDim });\n        const newGrid = gridMaker(dimensions.width, dimensions.height, fields.start, fields.end);\n        setGrid({ ...newGrid });\n    };\n\n    const changeChanger = (to) => {\n        setChangeWhat(to);\n    };\n\n    const changeField = (to) => {\n        if (changeWhat !== 0) {\n            const oldFields = fields;\n            if (changeWhat === 1) {\n                oldFields.start = to;\n                setFields({ ...oldFields });\n            } else if (changeWhat === 2) {\n                oldFields.end = to;\n                setFields({ ...oldFields });\n            }\n            if (pathFindingState === 2) setPathfindingState(0);\n            const newGrid = gridMaker(dimensions.width, dimensions.height, fields.start, fields.end);\n            setGrid({ ...grid, fields: newGrid.fields });\n        } else {\n            if (to !== fields.start && to !== fields.end) {\n                const newGrid = grid.fields;\n                const place = idToArrayplace(to);\n                newGrid[place[0]][place[1]].state = newGrid[place[0]][place[1]].state === 1 ? 3 : 1;\n                newGrid[place[0]][place[1]].bg = newGrid[place[0]][place[1]].bg === 'white' ? 'black' : 'white';\n                setGrid({ ...grid, fields: newGrid });\n            }\n        }\n    };\n\n    const [pathFindingState, setPathfindingState] = useState(0);\n\n    const step = (type) => {\n        let newGrid = grid.fields;\n        if (pathFindingState === 0) {\n            start(type);\n        }\n        const graphType = { type: 'grid', grid };\n        if (pathFindingState !== 3) {\n            let progress;\n            if (type === 'd') {\n                progress = dijkstra.step(fields.end, fields.start, graphType);\n                setPathfindingState(1);\n            } else if (type === 'a') {\n                progress = aStar.step(fields.start, fields.end, graphType);\n                setPathfindingState(2);\n            }\n            if (progress.msg === 'done') {\n                for (let i = 0; i < progress.path.length; i++) {\n                    const place = idToArrayplace(progress.path[i]);\n                    newGrid[place[0]][place[1]].bg = 'yellow';\n                }\n                setPathfindingState(3);\n                setGrid({ ...grid, fields: newGrid });\n            } else if (progress.msg === 'running' && progress.field !== fields.start) {\n                const newGrid = grid.fields;\n                const place = idToArrayplace(progress.field);\n                newGrid[place[0]][place[1]].bg = 'green';\n                setGrid({ ...grid, fields: newGrid });\n            }\n        } else {\n            const newRun = gridMaker(dimensions.width, dimensions.height, fields.start, fields.end);\n            setGrid({ ...grid, fields: newRun.fields });\n            setPathfindingState(0);\n        }\n    };\n\n    const start = (type) => {\n        if (type === 'd') {\n            dijkstra.startPath(fields.start, { type: 'grid', grid });\n        } else if (type === 'a') {\n            aStar.startPath(fields.start, { type: 'grid', grid });\n        }\n\n        setPathfindingState(1);\n    };\n\n    const idToArrayplace = (id) => {\n        let row = Math.floor(id / dimensions.height);\n        let col = id % dimensions.height;\n        return [row, col];\n    };\n\n    return (\n        <div className={styleSheeet.grid}>\n            <div className={styleSheeet.options}>\n                <ul>\n                    <h4>Change</h4>\n                    <div className={styleSheeet.combination}>\n                        <input\n                            type=\"radio\"\n                            id=\"Walls\"\n                            name=\"selector\"\n                            checked={changeWhat === 0 ? 'checked' : ''}\n                            onChange={(e) => {\n                                changeChanger(parseInt(e.target.value));\n                            }}\n                            value=\"0\"\n                        />\n                        <label htmlFor=\"Walls\">Walls</label>\n                    </div>\n                    <div className={styleSheeet.combination}>\n                        <input\n                            type=\"radio\"\n                            id=\"Startfield\"\n                            name=\"selector\"\n                            checked={changeWhat === 1 ? 'checked' : ''}\n                            onChange={(e) => {\n                                changeChanger(parseInt(e.target.value));\n                            }}\n                            value=\"1\"\n                        />\n                        <label htmlFor=\"Startfield\">Startfield</label>\n                    </div>\n                    <div className={styleSheeet.combination}>\n                        <input\n                            type=\"radio\"\n                            id=\"Endfield\"\n                            name=\"selector\"\n                            checked={changeWhat === 2 ? 'checked' : ''}\n                            onChange={(e) => {\n                                changeChanger(parseInt(e.target.value));\n                            }}\n                            value=\"2\"\n                        />\n                        <label htmlFor=\"Endfield\">Endfield</label>\n                    </div>\n                </ul>\n                <div className={styleSheeet.dimensions}>\n                    <h4>More changes</h4>\n                    <p>\n                        Width:\n                        <input\n                            type=\"number\"\n                            value={dimensions.width}\n                            onChange={(e) => {\n                                changeDimension('width', e.target.value);\n                            }}\n                        />\n                    </p>\n                    <p>\n                        Height:\n                        <input\n                            type=\"number\"\n                            value={dimensions.height}\n                            onChange={(e) => {\n                                changeDimension('height', e.target.value);\n                            }}\n                        />\n                    </p>\n                </div>\n                <div>\n                    <h4>Algorithm step</h4>\n                    <button\n                        onClick={() => {\n                            step(pathFindingState === 1 ? 'd' : 'a');\n                        }}\n                    >\n                        {pathFindingState === 3 ? 'Clear' : pathFindingState === 1 ? 'Dijkstra' : 'A*'}\n                    </button>\n                    <button\n                        onClick={() => {\n                            step(pathFindingState === 2 ? 'a' : 'd');\n                        }}\n                    >\n                        {pathFindingState === 3 ? 'Clear' : pathFindingState === 2 ? 'A*' : 'Dijkstra'}\n                    </button>\n                </div>\n            </div>\n            <Table grid={grid} styleSheeet={styleSheeet} changeField={changeField} />\n        </div>\n    );\n};\n\nexport default Grid;\nlet Node = class {\n    constructor(id, bg) {\n        this.id = id;\n        this.bg = bg;\n        this.from = null;\n        this.state = 1;\n        this.distance = Infinity;\n    }\n};\n\nconst gridMaker = (w, h, start, end) => {\n    const grid = { dimensions: { width: w, height: h }, fields: [] };\n    let id = 0;\n    for (let i = 0; i < h; i++) {\n        let row = [];\n        for (let j = 0; j < w; j++) {\n            const bg = id === start ? 'lightgreen' : id === end ? 'red' : 'white';\n            row.push(new Node(id++, bg));\n        }\n        grid.fields.push(row);\n    }\n    return grid;\n};\n","import React, { useRef, useEffect } from 'react';\n\nconst Canvas = ({ click, draw }) => {\n    const canvasRef = useRef(null);\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const context = canvas.getContext('2d');\n        draw(context);\n    }, [draw]);\n\n    return (\n        <canvas\n            width={window.innerWidth * 0.7}\n            height={window.innerHeight * 0.7}\n            onClick={(e) => {\n                click(canvasRef.current, e);\n            }}\n            ref={canvasRef}\n        ></canvas>\n    );\n};\n\nexport default Canvas;\n","import React from 'react';\n\nconst GraphOptions = ({ style, change, currentMark, changeGraphtype, changeAlgorithm, step, clear, fields, setField, amountOfVertices }) => {\n    let fieldOptions = { start: [], end: [] };\n\n    if (fields.start === undefined) {\n        fieldOptions.start.push('none');\n    }\n\n    if (fields.end === undefined) {\n        fieldOptions.end.push('none');\n    }\n\n    for (let i = 0; i < amountOfVertices; i++) {\n        fieldOptions.start.push(i);\n        fieldOptions.end.push(i);\n    }\n\n    return (\n        <div className={style.options}>\n            <div className={style.clickChanges}>\n                <h3>Click</h3>\n                <div>\n                    <input\n                        type=\"radio\"\n                        id=\"Vertices\"\n                        name=\"options\"\n                        value=\"0\"\n                        checked={currentMark === 0}\n                        onChange={() => {\n                            change(0);\n                        }}\n                    />\n                    <label htmlFor=\"Vertices\">Vertices</label>\n                    <input\n                        type=\"radio\"\n                        id=\"Edges\"\n                        name=\"options\"\n                        value=\"1\"\n                        checked={currentMark === 1}\n                        onChange={() => {\n                            change(1);\n                        }}\n                    />\n                    <label htmlFor=\"Edges\">Edges</label>\n                </div>\n                <div>\n                    <input\n                        type=\"radio\"\n                        id=\"RemoveV\"\n                        name=\"options\"\n                        value=\"2\"\n                        checked={currentMark === 2}\n                        onChange={() => {\n                            change(2);\n                        }}\n                    />\n                    <label htmlFor=\"RemoveV\">Remove Vertices</label>\n                    <input\n                        type=\"radio\"\n                        id=\"RemoveE\"\n                        name=\"options\"\n                        value=\"2\"\n                        checked={currentMark === 3}\n                        onChange={() => {\n                            change(3);\n                        }}\n                    />\n                    <label htmlFor=\"RemoveE\">Remove Edges</label>\n                </div>\n            </div>\n            <div className={style.graphType}>\n                <h3>Graph type</h3>\n                <select\n                    onChange={(e) => {\n                        changeGraphtype(e.target.value);\n                    }}\n                >\n                    <option value=\"directed\">Directed</option>\n                    <option value=\"undirected\">Undirected</option>\n                </select>\n            </div>\n            <div className={style.algorithms}>\n                <h3>Algorithms</h3>\n                <select\n                    onChange={(e) => {\n                        changeAlgorithm(e.target.value);\n                    }}\n                >\n                    <option value=\"Dijkstra\">Dijkstra</option>\n                    <option value=\"Astar\">A*</option>\n                </select>\n                <button\n                    onClick={() => {\n                        step();\n                    }}\n                >\n                    Step\n                </button>\n            </div>\n            <div className={style.clear}>\n                <h3>Fields</h3>\n                <p>\n                    Starting field: {fields.start === undefined ? 'undefined' : fields.start}, change:\n                    <select\n                        defaultValue={fields.start}\n                        onChange={(e) => {\n                            setField('start', parseInt(e.target.value));\n                        }}\n                    >\n                        {fieldOptions.start.map((vertex) => {\n                            return (\n                                <option value={vertex} key={vertex} disabled={vertex === fields.end}>\n                                    {vertex}\n                                </option>\n                            );\n                        })}\n                    </select>\n                </p>\n                <p>\n                    Ending field: {fields.end === undefined ? 'undefined' : fields.end}, change:\n                    <select\n                        defaultValue={fields.end}\n                        onChange={(e) => {\n                            setField('end', parseInt(e.target.value));\n                        }}\n                    >\n                        {fieldOptions.end.map((vertex) => {\n                            return (\n                                <option value={vertex} key={vertex} disabled={vertex === fields.start}>\n                                    {vertex}\n                                </option>\n                            );\n                        })}\n                    </select>\n                </p>\n                <button\n                    onClick={() => {\n                        clear();\n                    }}\n                >\n                    Clear graph\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default GraphOptions;\n","import React, { useState } from 'react';\n\n//Components\nimport Canvas from './Canvas';\nimport GraphOptions from './GraphOptions';\n\n//Style\nimport style from '../Styles/graph.module.css';\n\n//Pathfinding\nconst dijkstra = require('../Pathfinding/dijkstra');\nconst aStar = require('../Pathfinding/aStar');\n\nconst Graph = () => {\n    const [vertices, setVertices] = useState([]);\n    const [edges, setEdges] = useState([]);\n    const [clickType, setClickType] = useState(0); //0: vertices, 1: edges, 2: remove\n    const [graphType, setGraphtype] = useState('directed');\n    const [algorithm, setAlgorithm] = useState('Dijkstra');\n    const [pathfindingState, setPathfindingState] = useState('ready');\n    const [fields, setFields] = useState({ start: undefined, end: undefined });\n\n    const testSetup = () => {\n        const testV = [\n            new vertex(0, 173, 232),\n            new vertex(1, 195, 410),\n            new vertex(2, 373, 378),\n            new vertex(3, 402, 253),\n            new vertex(4, 490, 235),\n            new vertex(5, 644, 236),\n            new vertex(6, 657, 334),\n            new vertex(7, 629, 426),\n            new vertex(8, 482, 488),\n            new vertex(9, 318, 525),\n            new vertex(10, 267, 379),\n            new vertex(11, 284, 261),\n            new vertex(12, 416, 108),\n        ];\n        const testE = [\n            new edge(0, 0, 11, '#000000'),\n            new edge(1, 11, 12, '#000000'),\n            new edge(2, 12, 3, '#000000'),\n            new edge(3, 3, 4, '#000000'),\n            new edge(4, 4, 2, '#000000'),\n            new edge(5, 2, 9, '#000000'),\n            new edge(6, 9, 8, '#000000'),\n            new edge(7, 8, 7, '#000000'),\n            new edge(8, 7, 2, '#000000'),\n            new edge(9, 2, 6, '#000000'),\n            new edge(10, 6, 5, '#000000'),\n            new edge(11, 5, 12, '#000000'),\n            new edge(12, 3, 10, '#000000'),\n            new edge(13, 10, 11, '#000000'),\n            new edge(14, 11, 1, '#000000'),\n            new edge(15, 1, 9, '#000000'),\n        ];\n        setVertices([...testV]);\n        setEdges([...testE]);\n    };\n\n    const circleRadius = 30;\n\n    const drawVertices = (ctx) => {\n        drawEdges(ctx);\n        vertices.forEach((vertex) => {\n            ctx.fillStyle = vertex.color.outer;\n            ctx.beginPath();\n            ctx.arc(vertex.x, vertex.y, circleRadius, 0, 2 * Math.PI);\n            ctx.fill();\n            ctx.fillStyle = vertex.color.inner;\n            ctx.beginPath();\n            ctx.arc(vertex.x, vertex.y, circleRadius * 0.85, 0, 2 * Math.PI);\n            ctx.fill();\n            ctx.fillStyle = '#000000';\n            ctx.font = '20px Arial';\n            ctx.fillText(vertex.id, vertex.x - 5, vertex.y + 5);\n        });\n    };\n\n    const drawEdges = (ctx) => {\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n        ctx.lineWidth = 3;\n        edges.forEach((e) => {\n            ctx.fillStyle = e.color;\n            ctx.strokeStyle = e.color;\n            ctx.beginPath();\n            ctx.moveTo(vertices[e.from].x, vertices[e.from].y);\n            ctx.lineTo(vertices[e.to].x, vertices[e.to].y);\n            ctx.stroke();\n            if (graphType === 'directed') {\n                const middle = middleOfEdge(vertices[e.from], vertices[e.to]);\n                const trianglePoints = calcTrianglePoints(vertices[e.from], vertices[e.to], middle);\n                ctx.beginPath();\n                ctx.moveTo(trianglePoints[0].x, trianglePoints[0].y);\n                ctx.lineTo(trianglePoints[1].x, trianglePoints[1].y);\n                ctx.lineTo(trianglePoints[2].x, trianglePoints[2].y);\n                ctx.lineTo(trianglePoints[0].x, trianglePoints[0].y);\n                ctx.fill();\n                ctx.strokeStyle = '#ffffff';\n                ctx.moveTo(trianglePoints[0].x, trianglePoints[0].y);\n                ctx.lineTo(trianglePoints[1].x, trianglePoints[1].y);\n                ctx.stroke();\n            }\n        });\n    };\n\n    const canvasClick = (ctx, event) => {\n        if (clickType === 0) {\n            createVertex(ctx, event);\n        } else if (clickType === 1) {\n            createEdge(ctx, event);\n        } else if (clickType === 2) {\n            removeVertex(ctx, event);\n        } else if (clickType === 3) {\n            removeEdge(ctx, event);\n        } else {\n            console.error('Something is wrong');\n        }\n    };\n\n    const createVertex = (ctx, event) => {\n        const rect = ctx.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        if (checkVertexIntesection(x, y) === false) {\n            setVertices([...vertices, new vertex(vertices.length, x, y)]);\n        }\n    };\n\n    const [edgeStart, setStartEdge] = useState({ start: undefined });\n\n    const createEdge = (ctx, event) => {\n        const rect = ctx.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        const interSection = checkVertexIntesection(x, y);\n        if (interSection !== false) {\n            if (edgeStart.start === undefined) {\n                setStartEdge({ ...edgeStart, start: interSection });\n                const withColor = vertices;\n                withColor[interSection].color.inner = '#4678d6';\n                withColor[interSection].color.outer = '#1d266f';\n                setVertices([...withColor]);\n            } else if (edgeStart.start !== undefined) {\n                if (edgeDoesntExist(edgeStart.start, interSection, edges)) {\n                    const newEdge = new edge(edges.length, edgeStart.start, interSection, '#000000');\n                    setEdges([...edges, newEdge]);\n                }\n                const standardColor = vertices;\n                standardColor[edgeStart.start].color.inner = edgeStart.start === fields.start ? '#00ff00' : edgeStart.start === fields.end ? '#ff0000' : '#97bc62';\n                standardColor[edgeStart.start].color.outer = '#2c5f2d';\n                setStartEdge({ ...edgeStart, start: interSection });\n                standardColor[interSection].color.inner = '#4678d6';\n                standardColor[interSection].color.outer = '#1d266f';\n                setVertices([...standardColor]);\n            }\n        } else {\n            setStartEdge({ ...edgeStart, start: undefined });\n            if (edgeStart.start !== undefined) {\n                const standardColor = vertices;\n                standardColor[edgeStart.start].color.inner = edgeStart.start === fields.start ? '#00ff00' : edgeStart.start === fields.end ? '#ff0000' : '#97bc62';\n                standardColor[edgeStart.start].color.outer = '#2c5f2d';\n                setVertices([...standardColor]);\n            }\n        }\n    };\n\n    const removeVertex = (ctx, event) => {\n        const rect = ctx.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        const vertexIntesect = checkVertexIntesection(x, y);\n        if (vertexIntesect !== false) {\n            const newVertices = vertices;\n            newVertices.splice(vertexIntesect, 1);\n            setVertices([...newVertices]);\n            removeEdgesIncludingVertex(vertexIntesect);\n        }\n    };\n\n    const checkVertexIntesection = (x, y) => {\n        for (let i = 0; i < vertices.length; i++) {\n            if (distance([x, y], [vertices[i].x, vertices[i].y]) <= circleRadius * 2.2) {\n                return i;\n            }\n        }\n        return false;\n    };\n\n    const removeEdgesIncludingVertex = (vertex) => {\n        const newEdges = edges;\n        for (let i = 0; i < newEdges.length; i++) {\n            if (newEdges[i].to === vertex || newEdges[i].from === vertex) {\n                newEdges.splice(i, 1);\n                i--;\n            }\n        }\n        setEdges([...newEdges]);\n    };\n\n    const removeEdge = (ctx, event) => {\n        const rect = ctx.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        let closest = { edge: undefined, distance: Infinity };\n        for (let i = 0; i < edges.length; i++) {\n            const distToEdge = distPointToLineSegment({ x, y }, { x: vertices[edges[i].from].x, y: vertices[edges[i].from].y }, { x: vertices[edges[i].to].x, y: vertices[edges[i].to].y });\n            if (distToEdge < closest.distance) {\n                closest.edge = i;\n                closest.distance = distToEdge;\n            }\n        }\n        //125 distance is pretty close i think\n        if (closest.distance < 85) {\n            const newEdges = edges;\n            newEdges.splice(closest.edge, 1);\n            setEdges([...newEdges]);\n        }\n    };\n\n    //Functions for props\n    const changeType = (type) => {\n        setClickType(type);\n    };\n\n    const changeGraphtype = (type) => {\n        setGraphtype(type);\n    };\n\n    const changeAlgorithm = (algorithm) => {\n        if (pathfindingState === 'ready') {\n            setAlgorithm(algorithm);\n        }\n    };\n\n    const algoStep = () => {\n        if (fields.start !== undefined && fields.end !== undefined) {\n            if (pathfindingState === 'ready') {\n                startAlgo();\n            }\n            const typeForAlgo = { type: 'graph' };\n            const step = algorithm === 'Dijkstra' ? dijkstra.step(fields.end, fields.start, typeForAlgo) : aStar.step(fields.end, fields.start, typeForAlgo);\n            console.log(step);\n            if (step.msg === 'running') {\n                const newVertices = vertices;\n                if (step.field.from !== -1) {\n                    newVertices[step.field.from].color.inner = '#808080';\n                }\n                newVertices[step.field.to].color.inner = '#ffff00';\n                setVertices([...newVertices]);\n            }\n            if (step.msg === 'done') {\n                if (step.path.length > 0) {\n                    const newVertices = vertices;\n                    newVertices[fields.start].color.inner = '#00ff00';\n                }\n                setFinishedPath(step.path);\n            }\n        }\n    };\n\n    const startAlgo = () => {\n        if (pathfindingState === 'ready' && fields.start !== undefined && fields.end !== undefined) {\n            console.log('tr');\n            if (algorithm === 'Dijkstra') {\n                dijkstra.startPath(fields.start, { type: 'graph', graph: { vertices, edges, graphType } });\n                setPathfindingState('dijkstra');\n            } else if (algorithm === 'Astar') {\n                console.log('aaa');\n                aStar.startPath(fields.start, { type: 'graph', graph: { vertices, edges, graphType } });\n                setPathfindingState('Astar');\n            }\n        }\n    };\n\n    const setFinishedPath = (path) => {\n        console.log(path);\n        const newEdges = edges;\n        let lastV = fields.end;\n        for (let v of path) {\n            newEdges.push(new edge(newEdges.length, v, lastV, '#90ee90'));\n            lastV = v;\n        }\n        newEdges.push(new edge(newEdges.length, fields.start, lastV, '#90ee90'));\n        setEdges([...newEdges]);\n    };\n\n    const clearGraph = () => {\n        setEdges([]);\n        setVertices([]);\n    };\n\n    const setField = (field, to) => {\n        const oldField = fields[field];\n        setFields({ ...fields, [field]: to });\n        const newColor = vertices;\n        if (fields[field] !== undefined) {\n            newColor[oldField].color.inner = '#97bc62';\n            newColor[oldField].color.newouter = '#2c5f2d';\n        }\n        newColor[to].color.inner = field === 'start' ? '#00ff00' : '#ff0000';\n        setVertices([...newColor]);\n    };\n\n    return (\n        <div className={style.graphContainer}>\n            <button onClick={() => testSetup()}>Setup simple</button>\n            <h1>Graph</h1>\n            <GraphOptions\n                style={style}\n                change={changeType}\n                currentMark={clickType}\n                changeGraphtype={changeGraphtype}\n                changeAlgorithm={changeAlgorithm}\n                step={algoStep}\n                clear={clearGraph}\n                fields={fields}\n                setField={setField}\n                amountOfVertices={vertices.length}\n            />\n            <Canvas click={canvasClick} draw={drawVertices} drawType={clickType} />\n        </div>\n    );\n};\n\nfunction distance(first, second) {\n    const base = Math.pow(second[1] - first[1], 2) + Math.pow(second[0] - first[0], 2);\n    return Math.sqrt(base);\n}\n\nfunction middleOfEdge(v1, v2) {\n    const x = (v1.x + v2.x) / 2;\n    const y = (v1.y + v2.y) / 2;\n    return { x, y };\n}\n\nfunction calcTrianglePoints(v1, v2, middle) {\n    //the actual edge\n    const lineM = (v2.y - v1.y) / (v2.x - v1.x);\n    const lineB = v1.y - lineM * v1.x;\n    //the perp line\n    const perpM = -1 / lineM; //slope\n    const perpB = middle.y - perpM * middle.x; //y-intercept\n    //the two points for the line are the perps intersection with a circle from middle\n    //very helpful link: https://cscheng.info/2016/06/09/calculate-circle-line-intersection-with-javascript-and-p5js.html\n    const circle = { radius: 20, xCenter: middle.x, yCenter: middle.y };\n    const line = { slope: lineM, yIntercept: lineB };\n    const perpLine = { slope: perpM, yIntercept: perpB };\n    //the two points for the smalle perpendicular line\n    const perplinePoints = lineCircleInterception(perpLine, circle);\n    //the two points on the line, use the one closest to the end vertex/v2\n    const linePoints = lineCircleInterception(line, circle);\n    const correctPoint = distance([v2.x, v2.y], [linePoints[0].x, linePoints[0].y]) < distance([v2.x, v2.y], [linePoints[1].x, linePoints[1].y]) ? linePoints[0] : linePoints[1];\n    return [perplinePoints[0], perplinePoints[1], correctPoint];\n}\n\nfunction lineCircleInterception(line, circle) {\n    const a = 1 + Math.pow(line.slope, 2);\n    const b = -circle.xCenter * 2 + line.slope * (line.yIntercept - circle.yCenter) * 2;\n    const c = Math.pow(circle.xCenter, 2) + Math.pow(line.yIntercept - circle.yCenter, 2) - Math.pow(circle.radius, 2);\n\n    //find the discriminant\n    //const d = Math.pow(b, 2) - 4 * a * c; // if d > 0: two intersections, d = 0: one intersection/tangent, d < 0: no intersection\n    //find xintersections by the quadratic formula\n    const xintersections = [(-b + Math.sqrt(Math.pow(b, 2) - 4 * a * c)) / (2 * a), (-b - Math.sqrt(Math.pow(b, 2) - 4 * a * c)) / (2 * a)];\n    const p1 = { x: xintersections[0], y: line.slope * xintersections[0] + line.yIntercept };\n    const p2 = { x: xintersections[1], y: line.slope * xintersections[1] + line.yIntercept };\n    return [p1, p2];\n}\n\nfunction edgeDoesntExist(start, end, edges) {\n    for (let i = 0; i < edges.length; i++) {\n        if (edges[i].from === start && edges[i].to === end) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction distPointToLineSegment(point, startLine, endLine) {\n    const l2 = distHelper(startLine, endLine);\n    if (l2 === 0) return distHelper(point, startLine);\n    let t = ((point.x - startLine.x) * (endLine.x - startLine.x) + (point.y - startLine.y) * (endLine.y - startLine.y)) / l2;\n    t = Math.max(0, Math.min(1, t));\n    return distHelper(point, { x: startLine.x + t * (endLine.x - startLine.x), y: startLine.y + t * (endLine.y - startLine.y) });\n}\n\nfunction distHelper(startLine, endLine) {\n    return Math.pow(startLine.x - endLine.x, 2) + Math.pow(startLine.y - endLine.y, 2);\n}\n\nlet vertex = class {\n    constructor(id, x, y) {\n        this.id = id;\n        this.x = x;\n        this.y = y;\n        this.color = { inner: '#97bc62', outer: '#2c5f2d' };\n        this.from = null;\n    }\n};\n\nlet edge = class {\n    constructor(id, from, to, color) {\n        this.id = id;\n        this.from = from;\n        this.to = to;\n        this.length = 1;\n        this.color = color;\n    }\n};\n\nexport default Graph;\n","import React, { useState } from 'react';\n\n// Components\nimport Grid from '../Components/Grid';\nimport Graph from './Graph';\n\n// Styles\nimport style from '../Styles/switcher.module.css';\n\nconst Switcher = () => {\n    const [type, setType] = useState('graph');\n\n    const switchType = (to) => {\n        setType(to);\n    };\n\n    return (\n        <>\n            <div className={style.selector}>\n                <ul>\n                    <li\n                        className={type === 'grid' ? style.active : style.std}\n                        onClick={() => {\n                            switchType('grid');\n                        }}\n                    >\n                        Grid\n                    </li>\n                    <li\n                        className={type === 'graph' ? style.active : style.std}\n                        onClick={() => {\n                            switchType('graph');\n                        }}\n                    >\n                        Graph\n                    </li>\n                </ul>\n            </div>\n            <div className={style.container}>{type === 'grid' ? <Grid /> : <Graph />}</div>\n        </>\n    );\n};\n\nexport default Switcher;\n","import React from 'react';\n\n// Components\nimport Switcher from './Components/Switcher';\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <h1>Pathfinding</h1>\n            <Switcher />\n        </div>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}